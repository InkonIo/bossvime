#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Boss Timers - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—Å–ø–∞—É–Ω–∞ –±–æ—Å—Å–æ–≤
–í–µ—Ä—Å–∏—è: 2.0
–ê–≤—Ç–æ—Ä: Boss Timer Team
"""

import sys
import os
import tkinter as tk
from tkinter import messagebox
import json
from datetime import datetime


class BossTimerApp:
    def __init__(self):
        self.config_file = "boss_timer_config.json"
        self.config = self.load_config()
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        default_config = {
            "theme": "dark",
            "sound_enabled": True,
            "auto_minimize": False,
            "show_notifications": True,
            "last_used": datetime.now().isoformat()
        }
        
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                    for key, value in default_config.items():
                        if key not in config:
                            config[key] = value
                    return config
            else:
                return default_config
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return default_config
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            self.config["last_used"] = datetime.now().isoformat()
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        missing_deps = []
        
        try:
            import tkinter
        except ImportError:
            missing_deps.append("tkinter")
        
        try:
            from PIL import Image, ImageTk
        except ImportError:
            missing_deps.append("Pillow")
        
        try:
            from playsound import playsound
        except ImportError:
            missing_deps.append("playsound")
        
        if missing_deps:
            error_msg = f"""
–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
{chr(10).join('‚Ä¢ ' + dep for dep in missing_deps)}

–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:
pip install {' '.join(missing_deps)}
"""
            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", error_msg)
            return False
        
        return True
    
    def check_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (–∑–≤—É–∫–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"""
        required_dirs = ["sounds", "images"]
        missing_dirs = []
        
        for dir_name in required_dirs:
            if not os.path.exists(dir_name):
                missing_dirs.append(dir_name)
        
        if missing_dirs:
            warning_msg = f"""
–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞–ø–∫–∏ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏:
{chr(10).join('‚Ä¢ ' + d for d in missing_dirs)}

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
–°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–ø–∫–∏?
"""
            if messagebox.askyesno("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", warning_msg):
                for dir_name in missing_dirs:
                    try:
                        os.makedirs(dir_name, exist_ok=True)
                        print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {dir_name}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {dir_name}: {e}")
    
    def create_splash_screen(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        splash = tk.Tk()
        splash.title("Boss Timers")
        splash.geometry("400x300")
        splash.configure(bg='#2c3e50')
        splash.overrideredirect(True)  # –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É –æ–∫–Ω–∞
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        splash.update_idletasks()
        x = (splash.winfo_screenwidth() // 2) - (400 // 2)
        y = (splash.winfo_screenheight() // 2) - (300 // 2)
        splash.geometry(f"400x300+{x}+{y}")
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ —Ç–µ–∫—Å—Ç
        tk.Label(splash, 
                text="üéÆ", 
                font=('Arial', 48), 
                bg='#2c3e50', 
                fg='#e74c3c').pack(pady=50)
        
        tk.Label(splash, 
                text="BOSS TIMERS", 
                font=('Arial', 20, 'bold'), 
                bg='#2c3e50', 
                fg='#ecf0f1').pack()
        
        tk.Label(splash, 
                text="–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", 
                font=('Arial', 12), 
                bg='#2c3e50', 
                fg='#95a5a6').pack(pady=20)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä (–∏–º–∏—Ç–∞—Ü–∏—è)
        progress_frame = tk.Frame(splash, bg='#2c3e50')
        progress_frame.pack(pady=20)
        
        progress_bg = tk.Frame(progress_frame, bg='#34495e', height=10, width=300)
        progress_bg.pack()
        
        progress_fg = tk.Frame(progress_bg, bg='#e74c3c', height=10, width=0)
        progress_fg.place(x=0, y=0)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        def animate_progress(width=0):
            if width <= 300:
                progress_fg.configure(width=width)
                splash.after(10, lambda: animate_progress(width + 5))
            else:
                splash.after(500, splash.destroy)
        
        animate_progress()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        tk.Label(splash, 
                text="–í–µ—Ä—Å–∏—è 2.0 | Boss Timer Team", 
                font=('Arial', 8), 
                bg='#2c3e50', 
                fg='#7f8c8d').pack(side='bottom', pady=10)
        
        return splash
    
    def setup_exception_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        def handle_exception(exc_type, exc_value, exc_traceback):
            if issubclass(exc_type, KeyboardInterrupt):
                sys.__excepthook__(exc_type, exc_value, exc_traceback)
                return
            
            error_msg = f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:

–¢–∏–ø: {exc_type.__name__}
–°–æ–æ–±—â–µ–Ω–∏–µ: {str(exc_value)}

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.
"""
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", error_msg)
            sys.exit(1)
        
        sys.excepthook = handle_exception
    
    def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üéÆ –ó–∞–ø—É—Å–∫ Boss Timers v2.0")
        print("=" * 40)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        self.setup_exception_handler()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º splash screen
        splash = self.create_splash_screen()
        splash.mainloop()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        if not self.check_dependencies():
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        self.check_resources()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
        try:
            print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...")
            from gui import main_window
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
            main_window()
            
        except ImportError as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è gui: {e}"
            messagebox.showerror("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", error_msg)
            print(f"‚ùå {error_msg}")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}"
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            print(f"‚ùå {error_msg}")
        finally:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            self.save_config()
            print("üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            print("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    app = BossTimerApp()
    app.run()


if __name__ == "__main__":
    main()