import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import threading
import time
from playsound import playsound


class ModernBossWindow:
    def __init__(self, boss_name, minutes, sound_file, image_file, color="#3498db"):
        self.boss_name = boss_name
        self.total_seconds = int(minutes * 60)
        self.remaining_seconds = self.total_seconds
        self.sound_file = sound_file
        self.image_file = image_file
        self.color = color
        self.is_paused = False
        self.is_active = False
        
        self.create_window()
    
    def create_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–∞–π–º–µ—Ä–∞"""
        self.window = tk.Toplevel()
        self.window.title(f"{self.boss_name} - –¢–∞–π–º–µ—Ä")
        self.window.geometry("400x500")
        self.window.configure(bg='#2c3e50')
        self.window.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(self.window, bg='#34495e', height=80)
        header_frame.pack(fill='x', pady=(0, 20))
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(header_frame,
                              text=self.boss_name,
                              font=('Arial', 20, 'bold'),
                              bg='#34495e',
                              fg='#ecf0f1')
        title_label.pack(expand=True)
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ—Å—Å–∞
        self.load_boss_image()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞
        timer_frame = tk.Frame(self.window, bg='#2c3e50')
        timer_frame.pack(pady=20)
        
        # –ö—Ä—É–≥–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (–∏–º–∏—Ç–∞—Ü–∏—è)
        self.progress_frame = tk.Frame(timer_frame, bg='#34495e', width=200, height=200)
        self.progress_frame.pack()
        self.progress_frame.pack_propagate(False)
        
        # –í—Ä–µ–º—è –≤ —Ü–µ–Ω—Ç—Ä–µ
        self.time_label = tk.Label(self.progress_frame,
                                  text=self.format_time(self.total_seconds),
                                  font=('Arial', 24, 'bold'),
                                  bg='#34495e',
                                  fg=self.color)
        self.time_label.place(relx=0.5, rely=0.5, anchor='center')
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(timer_frame,
                                   text="–ù–∞–∂–º–∏—Ç–µ –°–¢–ê–†–¢ –¥–ª—è –∑–∞–ø—É—Å–∫–∞",
                                   font=('Arial', 12),
                                   bg='#2c3e50',
                                   fg='#95a5a6')
        self.status_label.pack(pady=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.create_progress_bar()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_buttons()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Å—Å–µ
        self.create_info_panel()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.window.update_idletasks()
        x = (self.window.winfo_screenwidth() // 2) - (400 // 2)
        y = (self.window.winfo_screenheight() // 2) - (500 // 2)
        self.window.geometry(f"400x500+{x}+{y}")
    
    def load_boss_image(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ—Å—Å–∞"""
        try:
            img = Image.open(self.image_file)
            img = img.resize((100, 100), Image.Resampling.LANCZOS)
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
            mask = Image.new('L', (100, 100), 0)
            from PIL import ImageDraw
            draw = ImageDraw.Draw(mask)
            draw.ellipse((0, 0, 100, 100), fill=255)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
            img.putalpha(mask)
            
            self.boss_photo = ImageTk.PhotoImage(img)
            
            image_label = tk.Label(self.window,
                                 image=self.boss_photo,
                                 bg='#2c3e50')
            image_label.pack(pady=10)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {self.image_file}: {e}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            emoji_label = tk.Label(self.window,
                                 text="üëæ",
                                 font=('Arial', 60),
                                 bg='#2c3e50',
                                 fg=self.color)
            emoji_label.pack(pady=10)
    
    def create_progress_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞"""
        progress_frame = tk.Frame(self.window, bg='#2c3e50')
        progress_frame.pack(pady=10, padx=40, fill='x')
        
        # –°—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
        style = ttk.Style()
        style.configure("Boss.Horizontal.TProgressbar",
                       background=self.color,
                       troughcolor='#34495e',
                       borderwidth=0,
                       lightcolor=self.color,
                       darkcolor=self.color)
        
        self.progress_bar = ttk.Progressbar(progress_frame,
                                          style="Boss.Horizontal.TProgressbar",
                                          mode='determinate',
                                          length=320)
        self.progress_bar.pack()
        self.progress_bar['maximum'] = self.total_seconds
        self.progress_bar['value'] = self.total_seconds
    
    def create_control_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        controls_frame = tk.Frame(self.window, bg='#2c3e50')
        controls_frame.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç/–ø–∞—É–∑–∞
        self.start_pause_btn = tk.Button(controls_frame,
                                        text="‚ñ∂ –°–¢–ê–†–¢",
                                        font=('Arial', 14, 'bold'),
                                        bg=self.color,
                                        fg='white',
                                        relief='flat',
                                        padx=20,
                                        pady=10,
                                        cursor='hand2',
                                        command=self.toggle_timer)
        self.start_pause_btn.pack(side='left', padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_btn = tk.Button(controls_frame,
                                 text="‚èπ –°–¢–û–ü",
                                 font=('Arial', 14, 'bold'),
                                 bg='#e74c3c',
                                 fg='white',
                                 relief='flat',
                                 padx=20,
                                 pady=10,
                                 cursor='hand2',
                                 command=self.stop_timer)
        self.stop_btn.pack(side='left', padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        self.reset_btn = tk.Button(controls_frame,
                                  text="üîÑ –°–ë–†–û–°",
                                  font=('Arial', 14, 'bold'),
                                  bg='#f39c12',
                                  fg='white',
                                  relief='flat',
                                  padx=20,
                                  pady=10,
                                  cursor='hand2',
                                  command=self.reset_timer)
        self.reset_btn.pack(side='left', padx=10)
        
        # –≠—Ñ—Ñ–µ–∫—Ç—ã hover –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.add_hover_effects()
    
    def add_hover_effects(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
        def create_hover_effect(button, normal_color, hover_color):
            def on_enter(e):
                button.configure(bg=hover_color)
            def on_leave(e):
                button.configure(bg=normal_color)
            button.bind("<Enter>", on_enter)
            button.bind("<Leave>", on_leave)
        
        create_hover_effect(self.start_pause_btn, self.color, self.lighten_color(self.color))
        create_hover_effect(self.stop_btn, '#e74c3c', '#c0392b')
        create_hover_effect(self.reset_btn, '#f39c12', '#e67e22')
    
    def create_info_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        info_frame = tk.Frame(self.window, bg='#34495e')
        info_frame.pack(fill='x', pady=(20, 0))
        
        # –í—Ä–µ–º—è —Ä–µ—Å–ø–∞—É–Ω–∞
        total_time = self.format_time(self.total_seconds)
        info_text = f"–í—Ä–µ–º—è —Ä–µ—Å–ø–∞—É–Ω–∞: {total_time}"
        
        info_label = tk.Label(info_frame,
                            text=info_text,
                            font=('Arial', 11),
                            bg='#34495e',
                            fg='#bdc3c7')
        info_label.pack(pady=10)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        tip_label = tk.Label(info_frame,
                           text="–°–æ–≤–µ—Ç: –æ–∫–Ω–æ –º–æ–∂–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç—å, –∑–≤—É–∫ –±—É–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω",
                           font=('Arial', 9),
                           bg='#34495e',
                           fg='#7f8c8d')
        tip_label.pack(pady=(0, 15))
    
    def toggle_timer(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç/–ø–∞—É–∑–∞"""
        if not self.is_active:
            self.start_timer()
        else:
            if self.is_paused:
                self.resume_timer()
            else:
                self.pause_timer()
    
    def start_timer(self):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞"""
        self.is_active = True
        self.is_paused = False
        self.start_pause_btn.configure(text="‚è∏ –ü–ê–£–ó–ê")
        self.status_label.configure(text="–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω", fg=self.color)
        self.countdown()
    
    def pause_timer(self):
        """–ü–∞—É–∑–∞ —Ç–∞–π–º–µ—Ä–∞"""
        self.is_paused = True
        self.start_pause_btn.configure(text="‚ñ∂ –ü–†–û–î–û–õ–ñ–ò–¢–¨")
        self.status_label.configure(text="–¢–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ", fg='#f39c12')
    
    def resume_timer(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞"""
        self.is_paused = False
        self.start_pause_btn.configure(text="‚è∏ –ü–ê–£–ó–ê")
        self.status_label.configure(text="–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω", fg=self.color)
        self.countdown()
    
    def stop_timer(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞"""
        self.is_active = False
        self.is_paused = False
        self.start_pause_btn.configure(text="‚ñ∂ –°–¢–ê–†–¢")
        self.status_label.configure(text="–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", fg='#e74c3c')
        self.window.destroy()
    
    def reset_timer(self):
        """–°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞"""
        self.is_active = False
        self.is_paused = False
        self.remaining_seconds = self.total_seconds
        self.start_pause_btn.configure(text="‚ñ∂ –°–¢–ê–†–¢")
        self.status_label.configure(text="–¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω", fg='#95a5a6')
        self.update_display()
    
    def countdown(self):
        """–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç"""
        if self.is_active and not self.is_paused and self.remaining_seconds > 0:
            self.remaining_seconds -= 1
            self.update_display()
            self.window.after(1000, self.countdown)
        elif self.remaining_seconds <= 0 and self.is_active:
            self.timer_finished()
    
    def update_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        self.time_label.configure(text=self.format_time(self.remaining_seconds))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress_value = self.total_seconds - self.remaining_seconds
        self.progress_bar['value'] = progress_value
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        if self.remaining_seconds <= 60:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞
            self.time_label.configure(fg='#e74c3c')
        elif self.remaining_seconds <= 300:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            self.time_label.configure(fg='#f39c12')
        else:
            self.time_label.configure(fg=self.color)
    
    def timer_finished(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞"""
        self.is_active = False
        self.time_label.configure(text="00:00:00", fg='#27ae60')
        self.status_label.configure(text="üéâ –ë–û–°–° –ü–û–Ø–í–ò–õ–°–Ø!", fg='#27ae60')
        self.progress_bar['value'] = self.total_seconds
        
        # –ò–∑–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏
        self.start_pause_btn.configure(text="‚úì –ì–û–¢–û–í–û", state='disabled')
        
        # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫
        self.play_notification_sound()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.show_completion_notification()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        self.window.after(10000, self.auto_close)
    
    def play_notification_sound(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        def play_sound():
            try:
                playsound(self.sound_file)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞: {e}")
        
        threading.Thread(target=play_sound, daemon=True).start()
    
    def show_completion_notification(self):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        # –ú–∏–≥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.flash_window()
        
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        self.window.bell()  # –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫
        
        # –ü–æ–¥–Ω–∏–º–∞–µ–º –æ–∫–Ω–æ –Ω–∞–≤–µ—Ä—Ö
        self.window.lift()
        self.window.focus_force()
    
    def flash_window(self):
        """–ú–∏–≥–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è"""
        original_bg = self.window.cget('bg')
        flash_color = '#27ae60'
        
        def flash(count=0):
            if count < 6:  # –ú–∏–≥–∞–µ–º 3 —Ä–∞–∑–∞ (6 –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–≤–µ—Ç–∞)
                current_bg = flash_color if count % 2 == 0 else original_bg
                self.window.configure(bg=current_bg)
                self.window.after(300, lambda: flash(count + 1))
            else:
                self.window.configure(bg=original_bg)
        
        flash()
    
    def auto_close(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        if self.window.winfo_exists():
            self.window.destroy()
    
    def format_time(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ß–ß:–ú–ú:–°–°"""
        hours, remainder = divmod(seconds, 3600)
        minutes, secs = divmod(remainder, 60)
        return f"{hours:02d}:{minutes:02d}:{secs:02d}"
    
    def lighten_color(self, color):
        """–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ hover"""
        color_map = {
            '#3498db': '#5dade2',
            '#27ae60': '#2ecc71',
            '#f39c12': '#f1c40f',
            '#8e44ad': '#9b59b6',
            '#16a085': '#1abc9c',
            '#c0392b': '#e74c3c',
            '#e74c3c': '#ec7063'
        }
        return color_map.get(color, color)


def create_boss_window(boss_name, minutes, sound_file, image_file, color="#3498db"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–∞–π–º–µ—Ä–∞ –±–æ—Å—Å–∞"""
    return ModernBossWindow(boss_name, minutes, sound_file, image_file, color)