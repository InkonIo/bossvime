import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import threading
import time
from playsound import playsound


class ModernBossTimer:
    def __init__(self):
        self.active_timers = {}  # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
        self.timer_windows = {}  # –û–∫–Ω–∞ —Ç–∞–π–º–µ—Ä–æ–≤
        
    def create_main_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        self.root = tk.Tk()
        self.root.title("Boss Timers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Å—Å–∞–º–∏")
        self.root.geometry("600x850")
        self.root.configure(bg='#2c3e50')
        self.root.resizable(False, False)
        
        # –°—Ç–∏–ª—å –¥–ª—è ttk —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        style.configure('Title.TLabel', 
                       background='#2c3e50', 
                       foreground='#ecf0f1', 
                       font=('Arial', 20, 'bold'))
        
        style.configure('Boss.TButton',
                       font=('Arial', 12, 'bold'),
                       padding=(10, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#2c3e50')
        title_frame.pack(pady=20)
        
        title_label = tk.Label(title_frame, 
                              text="üéÆ BOSS TIMERS", 
                              font=('Arial', 24, 'bold'),
                              bg='#2c3e50', 
                              fg='#e74c3c')
        title_label.pack()
        
        subtitle = tk.Label(title_frame,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Å—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
                           font=('Arial', 12),
                           bg='#2c3e50',
                           fg='#bdc3c7')
        subtitle.pack(pady=5)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–æ—Å—Å–æ–≤
        main_container = tk.Frame(self.root, bg='#2c3e50')
        main_container.pack(pady=20, padx=40, fill='both', expand=True)
        
        # –°–ø–∏—Å–æ–∫ –±–æ—Å—Å–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
        self.bosses_data = [
            ("–ó–æ–º–±–∏", 24, "üßü", "#27ae60", "sounds/zombie.mp3", "images/zombie.jpg"),
            ("–†—ã–ª–æ", 40, "üê∑", "#f39c12", "sounds/rilo.mp3", "images/pig.jpg"),
            ("–•–æ–ª—É–π", 60, "üë§", "#8e44ad", "sounds/xoluy.mp3", "images/villager.jpg"),
            ("–°—Ç–æ—á–Ω—ã–π —Å–ª–∏–∑–µ–Ω—å", 90, "üü¢", "#16a085", "sounds/slizen.mp3", "images/slime.png"),
            ("–ú–∞—Ç–∫–∞", 120, "üï∑Ô∏è", "#c0392b", "sounds/matka.mp3", "images/spider.jpg"),
            ("–¢–µ—Å—Ç", 0.083, "‚ö°", "#3498db", "sounds/rilo.mp3", "images/test.png"),
        ]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–æ—Å—Å–æ–≤
        for i, (name, minutes, emoji, color, sound, image) in enumerate(self.bosses_data):
            self.create_boss_card(main_container, name, minutes, emoji, color, sound, image, i)
        
        # –ü–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
        self.create_active_timers_panel()
        
        return self.root
    
    def create_boss_card(self, parent, name, minutes, emoji, color, sound_file, image_file, index):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Å—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        card_frame = tk.Frame(parent, bg='#34495e', relief='raised', bd=2)
        card_frame.pack(fill='x', pady=8, padx=10)
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        inner_frame = tk.Frame(card_frame, bg='#34495e')
        inner_frame.pack(fill='x', padx=15, pady=15)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–∫–æ–Ω–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        left_frame = tk.Frame(inner_frame, bg='#34495e')
        left_frame.pack(side='left', fill='both', expand=True)
        
        # –≠–º–æ–¥–∑–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        header_frame = tk.Frame(left_frame, bg='#34495e')
        header_frame.pack(fill='x')
        
        emoji_label = tk.Label(header_frame, 
                              text=emoji, 
                              font=('Arial', 24),
                              bg='#34495e')
        emoji_label.pack(side='left', padx=(0, 10))
        
        name_label = tk.Label(header_frame,
                             text=name,
                             font=('Arial', 16, 'bold'),
                             bg='#34495e',
                             fg='#ecf0f1')
        name_label.pack(side='left')
        
        # –í—Ä–µ–º—è —Ä–µ—Å–ø–∞—É–Ω–∞
        if minutes >= 60:
            time_text = f"{int(minutes//60)}—á {int(minutes%60)}–º" if minutes % 60 != 0 else f"{int(minutes//60)}—á"
        elif minutes >= 1:
            time_text = f"{int(minutes)}–º"
        else:
            time_text = f"{int(minutes*60)}—Å"
            
        time_label = tk.Label(left_frame,
                             text=f"–†–µ—Å–ø–∞—É–Ω: {time_text}",
                             font=('Arial', 11),
                             bg='#34495e',
                             fg='#95a5a6')
        time_label.pack(anchor='w', pady=(5, 0))
        
        # –õ–µ–π–±–ª –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç)
        countdown_label = tk.Label(left_frame,
                                  text="",
                                  font=('Arial', 11, 'bold'),
                                  bg='#34495e',
                                  fg=color)
        countdown_label.pack(anchor='w')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        setattr(self, f'{name.replace(" ", "_").lower()}_countdown_label', countdown_label)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        right_frame = tk.Frame(inner_frame, bg='#34495e')
        right_frame.pack(side='right')
        
        start_btn = tk.Button(right_frame,
                             text="‚ñ∂ –°–¢–ê–†–¢",
                             font=('Arial', 12, 'bold'),
                             bg=color,
                             fg='white',
                             relief='flat',
                             padx=20,
                             pady=10,
                             cursor='hand2',
                             command=lambda: self.start_boss_timer(name, minutes, sound_file, image_file, color))
        start_btn.pack()
        
        # –≠—Ñ—Ñ–µ–∫—Ç hover
        def on_enter(e):
            start_btn.configure(bg=self.lighten_color(color))
        def on_leave(e):
            start_btn.configure(bg=color)
            
        start_btn.bind("<Enter>", on_enter)
        start_btn.bind("<Leave>", on_leave)
    
    def create_active_timers_panel(self):
        """–ü–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤"""
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = tk.Frame(self.root, height=2, bg='#7f8c8d')
        separator.pack(fill='x', pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        timers_frame = tk.Frame(self.root, bg='#2c3e50')
        timers_frame.pack(fill='both', expand=True, padx=40)
        
        timers_title = tk.Label(timers_frame,
                               text="üïê –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã",
                               font=('Arial', 16, 'bold'),
                               bg='#2c3e50',
                               fg='#ecf0f1')
        timers_title.pack(pady=(0, 10))
        
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
        self.timers_container = tk.Frame(timers_frame, bg='#2c3e50')
        self.timers_container.pack(fill='both', expand=True)
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–∞–π–º–µ—Ä–æ–≤ –Ω–µ—Ç
        self.no_timers_label = tk.Label(self.timers_container,
                                       text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤",
                                       font=('Arial', 12),
                                       bg='#2c3e50',
                                       fg='#7f8c8d')
        self.no_timers_label.pack(pady=20)
    
    def start_boss_timer(self, boss_name, minutes, sound_file, image_file, color):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –±–æ—Å—Å–∞"""
        if boss_name in self.active_timers:
            # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            self.show_warning(f"–¢–∞–π–º–µ—Ä –¥–ª—è {boss_name} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä–∞
        total_seconds = int(minutes * 60)
        timer_data = {
            'name': boss_name,
            'total_seconds': total_seconds,
            'remaining_seconds': total_seconds,
            'sound_file': sound_file,
            'image_file': image_file,
            'color': color,
            'active': True
        }
        
        self.active_timers[boss_name] = timer_data
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ç–∞–π–º–µ—Ä–∞
        self.create_timer_card(boss_name, timer_data)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        self.start_countdown(boss_name)
        
        # –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ—Ç —Ç–∞–π–º–µ—Ä–æ–≤"
        if hasattr(self, 'no_timers_label'):
            self.no_timers_label.pack_forget()
    
    def create_timer_card(self, boss_name, timer_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞"""
        card = tk.Frame(self.timers_container, bg='#34495e', relief='raised', bd=1)
        card.pack(fill='x', pady=5, padx=10)
        
        inner = tk.Frame(card, bg='#34495e')
        inner.pack(fill='x', padx=15, pady=10)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤—Ä–µ–º—è
        left = tk.Frame(inner, bg='#34495e')
        left.pack(side='left', fill='both', expand=True)
        
        name_label = tk.Label(left,
                             text=boss_name,
                             font=('Arial', 14, 'bold'),
                             bg='#34495e',
                             fg='#ecf0f1')
        name_label.pack(anchor='w')
        
        time_label = tk.Label(left,
                             text="00:00:00",
                             font=('Arial', 12),
                             bg='#34495e',
                             fg=timer_data['color'])
        time_label.pack(anchor='w')
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        right = tk.Frame(inner, bg='#34495e')
        right.pack(side='right')
        
        stop_btn = tk.Button(right,
                            text="‚èπ –°–¢–û–ü",
                            font=('Arial', 10, 'bold'),
                            bg='#e74c3c',
                            fg='white',
                            relief='flat',
                            padx=15,
                            pady=5,
                            cursor='hand2',
                            command=lambda: self.stop_timer(boss_name))
        stop_btn.pack(side='right', padx=(5, 0))
        
        pause_btn = tk.Button(right,
                             text="‚è∏ –ü–ê–£–ó–ê",
                             font=('Arial', 10, 'bold'),
                             bg='#f39c12',
                             fg='white',
                             relief='flat',
                             padx=15,
                             pady=5,
                             cursor='hand2',
                             command=lambda: self.toggle_pause(boss_name))
        pause_btn.pack(side='right')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
        timer_data['card'] = card
        timer_data['time_label'] = time_label
        timer_data['pause_btn'] = pause_btn
        timer_data['paused'] = False
    
    def start_countdown(self, boss_name):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞"""
        def countdown():
            timer_data = self.active_timers.get(boss_name)
            if not timer_data or not timer_data['active']:
                return
            
            if not timer_data.get('paused', False) and timer_data['remaining_seconds'] > 0:
                timer_data['remaining_seconds'] -= 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                remaining = timer_data['remaining_seconds']
                hours, remainder = divmod(remaining, 3600)
                minutes, seconds = divmod(remainder, 60)
                time_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –ø–∞–Ω–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
                if 'time_label' in timer_data:
                    timer_data['time_label'].config(text=time_str)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –±–æ—Å—Å–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
                self.update_boss_card_countdown(boss_name, time_str, timer_data.get('paused', False))
                
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å—á–µ—Ç
                self.root.after(1000, countdown)
                
            elif timer_data['remaining_seconds'] <= 0:
                # –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
                self.timer_finished(boss_name)
        
        countdown()
    
    def update_boss_card_countdown(self, boss_name, time_str, is_paused):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –±–æ—Å—Å–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –ª–µ–π–±–ª –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        countdown_label_name = f'{boss_name.replace(" ", "_").lower()}_countdown_label'
        countdown_label = getattr(self, countdown_label_name, None)
        
        if countdown_label:
            if is_paused:
                countdown_label.config(text=f"‚è∏ –û—Ç—Å—á–µ—Ç: {time_str}", fg='#f39c12')
            else:
                countdown_label.config(text=f"‚è∞ –û—Ç—Å—á–µ—Ç: {time_str}")
    
    def timer_finished(self, boss_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞"""
        timer_data = self.active_timers.get(boss_name)
        if not timer_data:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–∞–Ω–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
        if 'time_label' in timer_data:
            timer_data['time_label'].config(text="–ü–û–Ø–í–ò–õ–°–Ø!", fg='#27ae60')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –±–æ—Å—Å–∞
        countdown_label_name = f'{boss_name.replace(" ", "_").lower()}_countdown_label'
        countdown_label = getattr(self, countdown_label_name, None)
        if countdown_label:
            countdown_label.config(text="üéâ –ë–û–°–° –ü–û–Ø–í–ò–õ–°–Ø!", fg='#27ae60')
        
        # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def play_sound():
            try:
                playsound(timer_data['sound_file'])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞: {e}")
        
        threading.Thread(target=play_sound, daemon=True).start()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.show_notification(boss_name)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        self.root.after(10000, lambda: self.stop_timer(boss_name))
    
    def stop_timer(self, boss_name):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞"""
        if boss_name in self.active_timers:
            timer_data = self.active_timers[boss_name]
            timer_data['active'] = False
            
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
            if 'card' in timer_data:
                timer_data['card'].destroy()
            
            # –û—á–∏—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –±–æ—Å—Å–∞
            countdown_label_name = f'{boss_name.replace(" ", "_").lower()}_countdown_label'
            countdown_label = getattr(self, countdown_label_name, None)
            if countdown_label:
                countdown_label.config(text="")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            del self.active_timers[boss_name]
            
            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not self.active_timers and hasattr(self, 'no_timers_label'):
                self.no_timers_label.pack(pady=20)
    
    def toggle_pause(self, boss_name):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã —Ç–∞–π–º–µ—Ä–∞"""
        timer_data = self.active_timers.get(boss_name)
        if not timer_data:
            return
        
        timer_data['paused'] = not timer_data.get('paused', False)
        
        if timer_data['paused']:
            timer_data['pause_btn'].config(text="‚ñ∂ –ü–†–û–î–û–õ–ñ–ò–¢–¨", bg='#27ae60')
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –±–æ—Å—Å–∞
            countdown_label_name = f'{boss_name.replace(" ", "_").lower()}_countdown_label'
            countdown_label = getattr(self, countdown_label_name, None)
            if countdown_label:
                remaining = timer_data['remaining_seconds']
                hours, remainder = divmod(remaining, 3600)
                minutes, seconds = divmod(remainder, 60)
                time_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
                countdown_label.config(text=f"‚è∏ –û—Ç—Å—á–µ—Ç: {time_str}", fg='#f39c12')
        else:
            timer_data['pause_btn'].config(text="‚è∏ –ü–ê–£–ó–ê", bg='#f39c12')
            # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å—á–µ—Ç
            self.start_countdown(boss_name)
    
    def show_notification(self, boss_name):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–æ—Å—Å–∞"""
        notification = tk.Toplevel(self.root)
        notification.title("–ë–æ—Å—Å –ø–æ—è–≤–∏–ª—Å—è!")
        notification.geometry("350x200")
        notification.configure(bg='#27ae60')
        notification.transient(self.root)
        notification.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        notification.geometry("+{}+{}".format(
            int(notification.winfo_screenwidth()/2 - 175),
            int(notification.winfo_screenheight()/2 - 100)
        ))
        
        tk.Label(notification,
                text="üéâ",
                font=('Arial', 40),
                bg='#27ae60',
                fg='white').pack(pady=20)
        
        tk.Label(notification,
                text=f"{boss_name} –ø–æ—è–≤–∏–ª—Å—è!",
                font=('Arial', 16, 'bold'),
                bg='#27ae60',
                fg='white').pack()
        
        tk.Button(notification,
                 text="OK",
                 font=('Arial', 12, 'bold'),
                 bg='white',
                 fg='#27ae60',
                 relief='flat',
                 padx=30,
                 pady=5,
                 command=notification.destroy).pack(pady=20)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        notification.after(5000, notification.destroy)
    
    def show_warning(self, message):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        warning = tk.Toplevel(self.root)
        warning.title("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        warning.geometry("300x150")
        warning.configure(bg='#e74c3c')
        warning.transient(self.root)
        warning.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        warning.geometry("+{}+{}".format(
            int(warning.winfo_screenwidth()/2 - 150),
            int(warning.winfo_screenheight()/2 - 75)
        ))
        
        tk.Label(warning,
                text="‚ö†Ô∏è",
                font=('Arial', 30),
                bg='#e74c3c',
                fg='white').pack(pady=10)
        
        tk.Label(warning,
                text=message,
                font=('Arial', 11),
                bg='#e74c3c',
                fg='white',
                wraplength=250).pack(pady=10)
        
        tk.Button(warning,
                 text="OK",
                 font=('Arial', 10, 'bold'),
                 bg='white',
                 fg='#e74c3c',
                 relief='flat',
                 padx=20,
                 command=warning.destroy).pack()
    
    def lighten_color(self, color):
        """–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ hover"""
        color_map = {
            '#27ae60': '#2ecc71',
            '#f39c12': '#f1c40f',
            '#8e44ad': '#9b59b6',
            '#16a085': '#1abc9c',
            '#c0392b': '#e74c3c',
            '#3498db': '#5dade2'
        }
        return color_map.get(color, color)


def main_window():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = ModernBossTimer()
    root = app.create_main_window()
    root.mainloop()


if __name__ == "__main__":
    main_window()